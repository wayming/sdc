// Code generated by MockGen. DO NOT EDIT.
// Source: worker_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	log "log"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	collector "github.com/wayming/sdc/collector"
)

// MockIWorker is a mock of IWorker interface.
type MockIWorker struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerMockRecorder
}

// MockIWorkerMockRecorder is the mock recorder for MockIWorker.
type MockIWorkerMockRecorder struct {
	mock *MockIWorker
}

// NewMockIWorker creates a new mock instance.
func NewMockIWorker(ctrl *gomock.Controller) *MockIWorker {
	mock := &MockIWorker{ctrl: ctrl}
	mock.recorder = &MockIWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorker) EXPECT() *MockIWorkerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockIWorker) Do(arg0 collector.IWorkItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockIWorkerMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIWorker)(nil).Do), arg0)
}

// Done mocks base method.
func (m *MockIWorker) Done() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockIWorkerMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockIWorker)(nil).Done))
}

// Init mocks base method.
func (m *MockIWorker) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIWorkerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIWorker)(nil).Init))
}

// Retry mocks base method.
func (m *MockIWorker) Retry(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retry", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Retry indicates an expected call of Retry.
func (mr *MockIWorkerMockRecorder) Retry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retry", reflect.TypeOf((*MockIWorker)(nil).Retry), arg0)
}

// MockIWorkerFactory is a mock of IWorkerFactory interface.
type MockIWorkerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerFactoryMockRecorder
}

// MockIWorkerFactoryMockRecorder is the mock recorder for MockIWorkerFactory.
type MockIWorkerFactoryMockRecorder struct {
	mock *MockIWorkerFactory
}

// NewMockIWorkerFactory creates a new mock instance.
func NewMockIWorkerFactory(ctrl *gomock.Controller) *MockIWorkerFactory {
	mock := &MockIWorkerFactory{ctrl: ctrl}
	mock.recorder = &MockIWorkerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkerFactory) EXPECT() *MockIWorkerFactoryMockRecorder {
	return m.recorder
}

// MakeWorker mocks base method.
func (m *MockIWorkerFactory) MakeWorker(arg0 *log.Logger) collector.IWorker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeWorker", arg0)
	ret0, _ := ret[0].(collector.IWorker)
	return ret0
}

// MakeWorker indicates an expected call of MakeWorker.
func (mr *MockIWorkerFactoryMockRecorder) MakeWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeWorker", reflect.TypeOf((*MockIWorkerFactory)(nil).MakeWorker), arg0)
}
