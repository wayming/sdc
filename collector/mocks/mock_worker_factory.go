// Code generated by MockGen. DO NOT EDIT.
// Source: worker_factory.go

// Package mocks is a generated GoMock package.
package mocks

import (
	log "log"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cache "github.com/wayming/sdc/cache"
	collector "github.com/wayming/sdc/collector"
	dbloader "github.com/wayming/sdc/dbloader"
)

// MockIWorker is a mock of IWorker interface.
type MockIWorker struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerMockRecorder
}

// MockIWorkerMockRecorder is the mock recorder for MockIWorker.
type MockIWorkerMockRecorder struct {
	mock *MockIWorker
}

// NewMockIWorker creates a new mock instance.
func NewMockIWorker(ctrl *gomock.Controller) *MockIWorker {
	mock := &MockIWorker{ctrl: ctrl}
	mock.recorder = &MockIWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorker) EXPECT() *MockIWorkerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockIWorker) Do(arg0 collector.IWorkItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockIWorkerMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIWorker)(nil).Do), arg0)
}

// Done mocks base method.
func (m *MockIWorker) Done() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockIWorkerMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockIWorker)(nil).Done))
}

// Init mocks base method.
func (m *MockIWorker) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockIWorkerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIWorker)(nil).Init))
}

// MockIWorkerFactory is a mock of IWorkerFactory interface.
type MockIWorkerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerFactoryMockRecorder
}

// MockIWorkerFactoryMockRecorder is the mock recorder for MockIWorkerFactory.
type MockIWorkerFactoryMockRecorder struct {
	mock *MockIWorkerFactory
}

// NewMockIWorkerFactory creates a new mock instance.
func NewMockIWorkerFactory(ctrl *gomock.Controller) *MockIWorkerFactory {
	mock := &MockIWorkerFactory{ctrl: ctrl}
	mock.recorder = &MockIWorkerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkerFactory) EXPECT() *MockIWorkerFactoryMockRecorder {
	return m.recorder
}

// MakeWorker mocks base method.
func (m *MockIWorkerFactory) MakeWorker(arg0 *log.Logger) collector.IWorker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeWorker", arg0)
	ret0, _ := ret[0].(collector.IWorker)
	return ret0
}

// MakeWorker indicates an expected call of MakeWorker.
func (mr *MockIWorkerFactoryMockRecorder) MakeWorker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeWorker", reflect.TypeOf((*MockIWorkerFactory)(nil).MakeWorker), arg0)
}

// MockIWorkerBuilder is a mock of IWorkerBuilder interface.
type MockIWorkerBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkerBuilderMockRecorder
}

// MockIWorkerBuilderMockRecorder is the mock recorder for MockIWorkerBuilder.
type MockIWorkerBuilderMockRecorder struct {
	mock *MockIWorkerBuilder
}

// NewMockIWorkerBuilder creates a new mock instance.
func NewMockIWorkerBuilder(ctrl *gomock.Controller) *MockIWorkerBuilder {
	mock := &MockIWorkerBuilder{ctrl: ctrl}
	mock.recorder = &MockIWorkerBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkerBuilder) EXPECT() *MockIWorkerBuilderMockRecorder {
	return m.recorder
}

// NewWorker mocks base method.
func (m *MockIWorkerBuilder) NewWorker() (collector.IWorker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWorker")
	ret0, _ := ret[0].(collector.IWorker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWorker indicates an expected call of NewWorker.
func (mr *MockIWorkerBuilderMockRecorder) NewWorker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWorker", reflect.TypeOf((*MockIWorkerBuilder)(nil).NewWorker))
}

// Prepare mocks base method.
func (m *MockIWorkerBuilder) Prepare() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare")
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockIWorkerBuilderMockRecorder) Prepare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockIWorkerBuilder)(nil).Prepare))
}

// WithCache mocks base method.
func (m *MockIWorkerBuilder) WithCache(cm cache.ICacheManager) collector.IWorkerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCache", cm)
	ret0, _ := ret[0].(collector.IWorkerBuilder)
	return ret0
}

// WithCache indicates an expected call of WithCache.
func (mr *MockIWorkerBuilderMockRecorder) WithCache(cm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCache", reflect.TypeOf((*MockIWorkerBuilder)(nil).WithCache), cm)
}

// WithDB mocks base method.
func (m *MockIWorkerBuilder) WithDB(db dbloader.DBLoader) collector.IWorkerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDB", db)
	ret0, _ := ret[0].(collector.IWorkerBuilder)
	return ret0
}

// WithDB indicates an expected call of WithDB.
func (mr *MockIWorkerBuilderMockRecorder) WithDB(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDB", reflect.TypeOf((*MockIWorkerBuilder)(nil).WithDB), db)
}

// WithExporter mocks base method.
func (m *MockIWorkerBuilder) WithExporter(exp collector.IDataExporter) collector.IWorkerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithExporter", exp)
	ret0, _ := ret[0].(collector.IWorkerBuilder)
	return ret0
}

// WithExporter indicates an expected call of WithExporter.
func (mr *MockIWorkerBuilderMockRecorder) WithExporter(exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithExporter", reflect.TypeOf((*MockIWorkerBuilder)(nil).WithExporter), exp)
}

// WithLogger mocks base method.
func (m *MockIWorkerBuilder) WithLogger(l *log.Logger) collector.IWorkerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLogger", l)
	ret0, _ := ret[0].(collector.IWorkerBuilder)
	return ret0
}

// WithLogger indicates an expected call of WithLogger.
func (mr *MockIWorkerBuilderMockRecorder) WithLogger(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLogger", reflect.TypeOf((*MockIWorkerBuilder)(nil).WithLogger), l)
}

// WithParams mocks base method.
func (m *MockIWorkerBuilder) WithParams(p *collector.PCParams) collector.IWorkerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithParams", p)
	ret0, _ := ret[0].(collector.IWorkerBuilder)
	return ret0
}

// WithParams indicates an expected call of WithParams.
func (mr *MockIWorkerBuilderMockRecorder) WithParams(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithParams", reflect.TypeOf((*MockIWorkerBuilder)(nil).WithParams), p)
}

// WithReader mocks base method.
func (m *MockIWorkerBuilder) WithReader(r collector.IHttpReader) collector.IWorkerBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithReader", r)
	ret0, _ := ret[0].(collector.IWorkerBuilder)
	return ret0
}

// WithReader indicates an expected call of WithReader.
func (mr *MockIWorkerBuilderMockRecorder) WithReader(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithReader", reflect.TypeOf((*MockIWorkerBuilder)(nil).WithReader), r)
}
