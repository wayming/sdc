// Code generated by MockGen. DO NOT EDIT.
// Source: dbloader/dbloader.go
// mockgen -source=dbloader/dbloader.go -destination=dbloader/dbloadermock.go -package=dbloader
// Package dbloader is a generated GoMock package.
package dbloader

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBLoader is a mock of DBLoader interface.
type MockDBLoader struct {
	ctrl     *gomock.Controller
	recorder *MockDBLoaderMockRecorder
}

// MockDBLoaderMockRecorder is the mock recorder for MockDBLoader.
type MockDBLoaderMockRecorder struct {
	mock *MockDBLoader
}

// NewMockDBLoader creates a new mock instance.
func NewMockDBLoader(ctrl *gomock.Controller) *MockDBLoader {
	mock := &MockDBLoader{ctrl: ctrl}
	mock.recorder = &MockDBLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBLoader) EXPECT() *MockDBLoaderMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDBLoader) Connect(host, port, user, password, dbname string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect", host, port, user, password, dbname)
}

// Connect indicates an expected call of Connect.
func (mr *MockDBLoaderMockRecorder) Connect(host, port, user, password, dbname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDBLoader)(nil).Connect), host, port, user, password, dbname)
}

// CreateSchema mocks base method.
func (m *MockDBLoader) CreateSchema(schema string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateSchema", schema)
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockDBLoaderMockRecorder) CreateSchema(schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockDBLoader)(nil).CreateSchema), schema)
}

// CreateTableByJsonStruct mocks base method.
func (m *MockDBLoader) CreateTableByJsonStruct(tableName string, jsonStructType reflect.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTableByJsonStruct", tableName, jsonStructType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTableByJsonStruct indicates an expected call of CreateTableByJsonStruct.
func (mr *MockDBLoaderMockRecorder) CreateTableByJsonStruct(tableName, jsonStructType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTableByJsonStruct", reflect.TypeOf((*MockDBLoader)(nil).CreateTableByJsonStruct), tableName, jsonStructType)
}

// Disconnect mocks base method.
func (m *MockDBLoader) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockDBLoaderMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockDBLoader)(nil).Disconnect))
}

// DropSchema mocks base method.
func (m *MockDBLoader) DropSchema(schema string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DropSchema", schema)
}

// DropSchema indicates an expected call of DropSchema.
func (mr *MockDBLoaderMockRecorder) DropSchema(schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropSchema", reflect.TypeOf((*MockDBLoader)(nil).DropSchema), schema)
}

// Exec mocks base method.
func (m *MockDBLoader) Exec(sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockDBLoaderMockRecorder) Exec(sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBLoader)(nil).Exec), sql)
}

// LoadByJsonText mocks base method.
func (m *MockDBLoader) LoadByJsonText(jsonText, tableName string, jsonStructType reflect.Type) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadByJsonText", jsonText, tableName, jsonStructType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadByJsonText indicates an expected call of LoadByJsonText.
func (mr *MockDBLoaderMockRecorder) LoadByJsonText(jsonText, tableName, jsonStructType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadByJsonText", reflect.TypeOf((*MockDBLoader)(nil).LoadByJsonText), jsonText, tableName, jsonStructType)
}

// RunQuery mocks base method.
func (m *MockDBLoader) RunQuery(sql string, structType reflect.Type, args ...any) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{sql, structType}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunQuery", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunQuery indicates an expected call of RunQuery.
func (mr *MockDBLoaderMockRecorder) RunQuery(sql, structType interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sql, structType}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunQuery", reflect.TypeOf((*MockDBLoader)(nil).RunQuery), varargs...)
}
